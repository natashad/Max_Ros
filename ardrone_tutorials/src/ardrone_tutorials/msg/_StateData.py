"""autogenerated by genpy from ardrone_tutorials/StateData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StateData(genpy.Message):
  _md5sum = "1d95cd8bc3cb2123b24beec59ccd8555"
  _type = "ardrone_tutorials/StateData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# StateData
# Data necessary to communicate the current/desired state of the drone

# Linear Position (m)
float64 x
float64 y
float64 z

# Angular Position (rads)
float64 roll
float64 pitch
float64 yaw

# Linear Velocities (m/s)
float64 vx
float64 vy
float64 vz

# Vertical Accelerations (m/s/s)
float64 ax
float64 ay
float64 az

"""
  __slots__ = ['x','y','z','roll','pitch','yaw','vx','vy','vz','ax','ay','az']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,roll,pitch,yaw,vx,vy,vz,ax,ay,az

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.ax = 0.
      self.ay = 0.
      self.az = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_12d.pack(_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_12d.pack(_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.vz, _x.ax, _x.ay, _x.az,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12d = struct.Struct("<12d")
